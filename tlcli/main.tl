--------------------------------------------------------------------------------
-- Main program
--------------------------------------------------------------------------------

local argparse = require("argparse")
local teal = require("teal.init")
local common = require("tlcli.common")
local configuration = require("tlcli.configuration")
local type Args = require("tlcli.args")
local type TlConfig = require("tlcli.tlconfig")

local function get_args_parser(): argparse.Parser
   local parser = argparse("tl", "A minimalistic typed dialect of Lua.")

   parser:add_complete_command()

   parser:option("--global-env-def", "Predefined types from a custom global environment.")
         :argname("<dtlfilename>")
         :count("*") -- `:count("0-1")` does not work? we verify by hand later then

   parser:option("-I --include-dir", "Prepend this directory to the module search path.")
         :argname("<directory>")
         :count("*")

   local warnings = common.keys(teal.warning_set())

   parser:option("--wdisable", "Disable the given kind of warning.")
         :argname("<warning>")
         :choices(warnings)
         :count("*")

   parser:option("--werror", "Promote the given kind of warning to an error. " ..
                             "Use '--werror all' to promote all warnings to errors")
         :argname("<warning>")
         :choices({ "all", table.unpack(warnings) })
         :count("*")

   parser:option("--feat-arity", "Define minimum arities for functions based on optional argument annotations.")
         :choices({ "off", "on" })

   parser:option("--gen-compat", "Generate compatibility code for targeting different Lua VM versions.")
         :choices({ "off", "optional", "required" })
         :default("optional")
         :defmode("a")

   parser:option("--gen-target", "Minimum targeted Lua version for generated code.")
         :choices({ "5.1", "5.3", "5.4" })

   parser:flag("--skip-compat53", "Skip compat53 insertions.")
         :hidden(true)
         :action(function(args: argparse.Args) args.gen_compat = "off" end)

   parser:flag("--version", "Print version and exit")

   parser:flag("-q --quiet", "Do not print information messages to stdout. Errors may still be printed to stderr.")

   parser:flag("-p --pretend", "Do not write to any files, type check and output what files would be generated.")

   parser:require_command(false)
   parser:command_target("command")

   local check_command = parser:command("check", "Type-check one or more Teal files.")
   check_command:argument("file", "The Teal source file."):args("+")

   local gen_command = parser:command("gen", "Generate a Lua file for one or more Teal files.")
   gen_command:argument("file", "The Teal source file."):args("+")
   gen_command:flag("-c --check", "Type check and fail on type errors.")
   gen_command:flag("--keep-hashbang", "Preserve hashbang line (#!) at the top of file if present.")
   gen_command:option("-o --output", "Write to <filename> instead.")
              :argname("<filename>")

   local run_command = parser:command("run", "Run a Teal script.")
   run_command:argument("script", "The Teal script."):args("+")

   run_command:option("-l --require", "Require module for execution.")
              :argname("<modulename>")
              :count("*")

   parser:command("warnings", "List each kind of warning the compiler can produce.")

   local types_command = parser:command("types", "Report all types found in one or more Teal files")
   types_command:argument("file", "The Teal source file."):args("+")
   types_command:option("-p --position", "Report values in scope in position line[:column]")
              :argname("<position>")

   return parser
end

return function(...: {string})
   local commands: {string:function(TlConfig, Args)} = {
      check = require("tlcli.commands.check"),
      gen = require("tlcli.commands.gen"),
      run = require("tlcli.commands.run"),
      types = require("tlcli.commands.types"),
      warnings = require("tlcli.commands.warnings"),
   }

   local parser = get_args_parser()

   local args = parser:parse(...) as Args

   if args["version"] then
      print(teal.version())
      os.exit(0)
   end

   local cmd = args["command"]
   if not cmd then
      print(parser:get_usage())
      print()
      print("Error: a command is required")
      os.exit(1)
   end

   local tlconfig, cfg_warnings = configuration.get()
   configuration.merge_config_and_args(tlconfig, args)
   if cfg_warnings and not args["quiet"] then
      for _, v in ipairs(cfg_warnings) do
         common.printerr(v)
      end
   end

   commands[cmd](tlconfig, args)
end
